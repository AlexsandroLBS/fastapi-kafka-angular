version: '3.7'

services:
  zookeeper:
    image: 'bitnami/zookeeper:3.7.0'
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - ./kafka/bitnami/zookeeper:/bitnami/zookeeper
  
  kafka:
    image: 'bitnami/kafka:2.8.0'
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
      - "9093:9093"
    expose:
      - "9092"
      - "9093"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS="kafka_capstone_event_bus:1:1"
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INTERNAL://kafka:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    volumes:
      - ./kafka/bitnami/kafka:/bitnami/kafka

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    ports:
     - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - kafka

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    environment:
        POSTGRES_USER: docker
        POSTGRES_PASSWORD: docker
        POSTGRES_DB: db
    ports:
      - 5432:5432
    volumes:
      - pg-data:/var/lib/postgresql/data
      - ./db/sql/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
      - ./db/sql/fill_tables.sql:/docker-entrypoint-initdb.d/fill_tables.sql

  myapp:
    image: 'desafio-backend:latest'
    container_name: myapp
    ports:
      - 8000:8000
    depends_on:
      - postgres
      - kafka

  
volumes:
  pg-data: